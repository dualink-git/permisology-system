<?php


namespace App\Filament\Resources;


use Filament\Tables;
use Filament\Forms\Form;
use Filament\Tables\Table;
use Filament\Resources\Resource;
use Filament\Forms\Components\Select;
use Filament\Tables\Columns\TextColumn;
use Filament\Forms\Components\TagsInput;
use Filament\Forms\Components\TextInput;
use App\Filament\Resources\PermissionResource\Pages;
use PermisologySystem\PermisologySystem\Services\RouteService;
use PermisologySystem\PermisologySystem\Services\PermissionService;
use PermisologySystem\PermisologySystem\Models\PermisologySystem\Permission;
use PermisologySystem\PermisologySystem\Models\PermisologySystem\AccessFirewallSettings;

class PermissionResource extends Resource
{
    protected static ?string $model = Permission::class;

    protected static ?string $navigationIcon = 'heroicon-o-lock-closed';
    protected static ?string $navigationGroup = 'People Management';

    public static function shouldRegisterNavigation(): bool
    {
        $adminRoute = config('filament.path', 'admin');
        $className = static::class;
        $route = str_replace(['App\\Filament\\Resources\\', 'Resource'], '', $className);
        $route = strtolower($route);
        $routePath = "$adminRoute/{$route}s";
        return PermissionService::hasAccessToAdminRoute($routePath);
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                TextInput::make('name')
                    ->required()
                    ->label('Permission Name'),

                Select::make('route_selection_admin')
                    ->label("Available " . ucfirst(RouteService::getAdminRoute()) . " Routes")
                    ->options(RouteService::getAllRoutes(RouteService::getAdminRoute()))
                    ->multiple()
                    ->helperText('Select one or more routes from the list.')
                    ->columnSpanFull(),
                Select::make('route_selection_api')
                    ->label('Available Api Routes')
                    ->options(RouteService::getFormattedApiRoutes())
                    ->multiple()
                    ->helperText('Select one or more routes from the list.')
                    ->columnSpanFull(),
                Select::make('route_selection_others')
                    ->label('Available Others Routes')
                    ->options(function () {
                        $settings = AccessFirewallSettings::first();
                        $apiBasePath = 'api/';
                        if ($settings) {
                            $apiBasePath = $settings?->api_base_path ?? 'api/';
                        }
                        return RouteService::getNotRoutes(['admin', $apiBasePath]);
                    })
                    ->multiple()
                    ->helperText('Select one or more routes from the list.')
                    ->columnSpanFull(),
                TagsInput::make('manual_routes')
                    ->label('Manual Routes')
                    ->placeholder('Add routes, e.g., admin/*, admin/users')
                    ->helperText('Define the list of manual routes for this permission.')
                    ->dehydrated()
            ]);
    }


    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('id')
                    ->label('ID')
                    ->sortable(),
                TextColumn::make('name')
                    ->label('Permission Name')
                    ->sortable()
                    ->searchable(),
                TextColumn::make('created_at')
                    ->label('Created At')
                    ->dateTime()
                    ->sortable(),
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }


    public static function getRelations(): array
    {
        return [
            //
        ];
    }


    public static function getPages(): array
    {
        return [
            'index' => Pages\ListPermissions::route('/'),
            'create' => Pages\CreatePermission::route('/create'),
            'edit' => Pages\EditPermission::route('/{record}/edit'),
        ];
    }
}
