<?php

namespace App\Filament\Resources;

use App\Filament\Resources\RolesResource\Pages;
use PermisologySystem\PermisologySystem\Services\PermissionService;;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Filament\Tables\Columns\TextColumn;
use Spatie\Permission\Models\Role;
use Filament\Forms\Components\Select;
use Spatie\Permission\Models\Permission;
use Filament\Notifications\Notification;

class RolesResource extends Resource
{
    protected static ?string $model = Role::class;

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';
    protected static ?string $navigationGroup = 'People Management';
    protected static ?string $navigationLabel = 'Roles';


    public static function shouldRegisterNavigation(): bool
    {
        $adminRoute = config('filament.path', 'admin');
        $className = static::class;
        $route = str_replace(['App\\Filament\\Resources\\', 'Resource'], '', $className);
        $route = strtolower($route);
        $routePath = "$adminRoute/{$route}s";
        return PermissionService::hasAccessToAdminRoute($routePath);
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\TextInput::make('name')
                    ->required()
                    ->label('Role Name')
                    ->disabled(fn($record) => $record && $record->name === 'Super Admin'),

                Forms\Components\TextInput::make('guard_name')
                    ->default('web')
                    ->required()
                    ->label('Guard Name'),

                // Selector mÃºltiple para asignar permisos al rol
                Select::make('permissions')
                    ->label('Permissions')
                    ->multiple()
                    ->relationship('permissions', 'name')
                    ->options(Permission::all()->pluck('name', 'id'))
                    ->preload(),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('id')
                    ->label('ID')
                    ->sortable(),
                TextColumn::make('name')
                    ->label('Role Name')
                    ->sortable()
                    ->searchable(),
                TextColumn::make('guard_name')
                    ->label('Guard Name')
                    ->sortable()
                    ->searchable(),
                TextColumn::make('created_at')
                    ->label('Created At')
                    ->dateTime()
                    ->sortable(),
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListRoles::route('/'),
            'create' => Pages\CreateRoles::route('/create'),
            'edit' => Pages\EditRoles::route('/{record}/edit'),
        ];
    }

    protected function beforeValidate()
    {
        try {
            dd('in the beforeValidate');
            parent::beforeValidate();
        } catch (\Exception $e) {
            Notification::make()
                ->title('Action Not Allowed')
                ->body($e->getMessage())
                ->danger()
                ->send();
            return false;
        }
    }

    protected function afterValidate(): void
    {
        dd('in the afterValidate');
    }

    protected function beforeSave()
    {
        try {
            dd('in the afterSave');
            parent::beforeSave();
        } catch (\Exception $e) {
            Notification::make()
                ->title('Action Not Allowed')
                ->body($e->getMessage())
                ->danger()
                ->send();

            // Cancel the save operation
            return false;
        }
    }
}
